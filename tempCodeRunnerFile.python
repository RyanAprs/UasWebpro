def rumusEXEYEZ(new, old):
    return abs((new - old) / new)

def initialXYZ():
    initialX = 0
    initialY = 0
    initialZ = 0
    return initialX, initialY, initialZ

def inputPersamaan():
    persamaanX = input("Masukkan persamaan x: ")
    persamaanY = input("Masukkan persamaan y: ")
    persamaanZ = input("Masukkan persamaan z: ")
    return persamaanX, persamaanY, persamaanZ

def mengeksekusiPersamaanX(persamaanX, y, z):
    return eval(persamaanX)

def mengeksekusiPersamaanY(persamaanY, x, z):
    return eval(persamaanY)

def zmengeksekusiPersamaanZ(persamaanZ, x, y):
    return eval(persamaanZ)
    "ex: ",
def jacobiMethod(persamaanX, persamaanY, persamaanZ):
    max_iterations = int(input("Masukkan maksimal iterasi: "))
    tolerance = 0.00000000000000001

    initialX, initialY, initialZ = initialXYZ()

    for i in range(max_iterations):
        if i == 0:
            print(i+1)
            print("x =", initialX, '-')
            print("y =", initialY, '-')
            print("z =", initialZ, '-')
        else:
            x_new = mengeksekusiPersamaanX(persamaanX, initialY, initialZ)
            y_new = mengeksekusiPersamaanY(persamaanY, initialX, initialZ)
            z_new = zmengeksekusiPersamaanZ(persamaanZ, initialX, initialY)

            ex = rumusEXEYEZ(x_new, initialX)
            ey = rumusEXEYEZ(y_new, initialY)
            ez = rumusEXEYEZ(z_new, initialZ)

            print(i + 1)
            print("x =", x_new, "ex: ", ex)
            print("y =", y_new, "ey: ", ey)
            print("z =", z_new, "ez: ", ez)

            if ex < tolerance and ey < tolerance and ez < tolerance:
                break

            initialX, initialY, initialZ = x_new, y_new, z_new

    print()
    print("Final solution:")
    print("x =", initialX, ex)
    print("y =", initialY, ey)
    print("z =", initialZ, ez)

persamaanX, persamaanY, persamaanZ = inputPersamaan()
jacobiMethod(persamaanX, persamaanY, persamaanZ)